"""down_form_orders idx unique remove, error_logs added

Revision ID: 8deb89464864
Revises: 0979d3271419
Create Date: 2025-07-22 20:53:39.871869

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '8deb89464864'
down_revision: Union[str, None] = '0979d3271419'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('ecount_auth_session')
    op.drop_table('ecount_config')
    op.drop_table('ecount_api_log')
    op.drop_table('ecount_sale')
    op.alter_column('certification_detail', 'certification_agency',
               existing_type=sa.VARCHAR(length=50),
               nullable=True)
    op.alter_column('count_executing', 'count_nm',
               existing_type=sa.VARCHAR(length=50),
               nullable=True)
    op.alter_column('count_executing', 'count_rev',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.add_column('down_form_orders', sa.Column('error_logs', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.drop_constraint(op.f('down_form_orders_idx_key'), 'down_form_orders', type_='unique')
    op.alter_column('product_mycategory_data', 'class_cd1',
               existing_type=sa.VARCHAR(length=50),
               nullable=True,
               existing_comment='대분류_분류코드')
    op.alter_column('product_mycategory_data', 'class_nm1',
               existing_type=sa.VARCHAR(length=50),
               nullable=True,
               existing_comment='대분류_분류명')
    op.alter_column('product_mycategory_data', 'class_pr1',
               existing_type=sa.VARCHAR(length=50),
               nullable=True,
               existing_comment='대분류_전시순서')
    op.alter_column('product_mycategory_data', 'class_cd2',
               existing_type=sa.VARCHAR(length=50),
               nullable=True,
               existing_comment='중분류_분류코드')
    op.alter_column('product_mycategory_data', 'class_nm2',
               existing_type=sa.VARCHAR(length=50),
               nullable=True,
               existing_comment='중분류_분류명')
    op.alter_column('product_mycategory_data', 'class_pr2',
               existing_type=sa.VARCHAR(length=50),
               nullable=True,
               existing_comment='중분류_전시순서')
    op.alter_column('product_mycategory_data', 'class_cd3',
               existing_type=sa.VARCHAR(length=50),
               nullable=True,
               existing_comment='소분류_분류코드')
    op.alter_column('product_mycategory_data', 'class_nm3',
               existing_type=sa.VARCHAR(length=50),
               nullable=True,
               existing_comment='소분류_분류명')
    op.alter_column('product_mycategory_data', 'class_pr3',
               existing_type=sa.VARCHAR(length=50),
               nullable=True,
               existing_comment='소분류_전시순서')
    op.alter_column('product_mycategory_data', 'class_cd4',
               existing_type=sa.VARCHAR(length=50),
               nullable=True,
               existing_comment='세분류_분류코드')
    op.alter_column('product_mycategory_data', 'class_nm4',
               existing_type=sa.VARCHAR(length=50),
               nullable=True,
               existing_comment='세분류_분류명')
    op.alter_column('product_mycategory_data', 'class_pr4',
               existing_type=sa.VARCHAR(length=50),
               nullable=True,
               existing_comment='세분류_전시순서')
    op.alter_column('test_product_modified_data', 'gubun',
               existing_type=sa.VARCHAR(length=10),
               nullable=True)
    op.alter_column('test_product_modified_data', 'product_nm',
               existing_type=sa.VARCHAR(length=60),
               nullable=True)
    op.alter_column('test_product_modified_data', 'no_product',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('test_product_modified_data', 'detail_img_url',
               existing_type=sa.TEXT(),
               nullable=True)
    op.alter_column('test_product_modified_data', 'no_word',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('test_product_modified_data', 'no_keyword',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('test_product_modified_data', 'product_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('test_product_modified_data', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('test_product_modified_data', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('test_product_raw_data', 'class_cd1',
               existing_type=sa.VARCHAR(length=100),
               nullable=True)
    op.alter_column('test_product_raw_data', 'class_cd2',
               existing_type=sa.VARCHAR(length=100),
               nullable=True)
    op.alter_column('test_product_raw_data', 'class_cd3',
               existing_type=sa.VARCHAR(length=100),
               nullable=True)
    op.alter_column('test_product_raw_data', 'gubun',
               existing_type=sa.VARCHAR(length=10),
               nullable=True)
    op.alter_column('test_product_raw_data', 'goods_season',
               existing_type=sa.SMALLINT(),
               nullable=True)
    op.alter_column('test_product_raw_data', 'sex',
               existing_type=sa.SMALLINT(),
               nullable=True)
    op.alter_column('test_product_raw_data', 'opt_type',
               existing_type=sa.SMALLINT(),
               nullable=True,
               existing_server_default=sa.text('2'))
    op.alter_column('test_product_raw_data', 'product_nm',
               existing_type=sa.VARCHAR(length=60),
               nullable=True)
    op.alter_column('test_product_raw_data', 'no_product',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('test_product_raw_data', 'detail_img_url',
               existing_type=sa.TEXT(),
               nullable=True)
    op.alter_column('test_product_raw_data', 'no_word',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('test_product_raw_data', 'no_keyword',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('test_product_raw_data', 'product_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('test_product_raw_data', 'product_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('test_product_raw_data', 'no_keyword',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('test_product_raw_data', 'no_word',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('test_product_raw_data', 'detail_img_url',
               existing_type=sa.TEXT(),
               nullable=True)
    op.alter_column('test_product_raw_data', 'no_product',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('test_product_raw_data', 'product_nm',
               existing_type=sa.VARCHAR(length=60),
               nullable=True)
    op.alter_column('test_product_raw_data', 'opt_type',
               existing_type=sa.SMALLINT(),
               nullable=True,
               existing_server_default=sa.text('2'))
    op.alter_column('test_product_raw_data', 'sex',
               existing_type=sa.SMALLINT(),
               nullable=True)
    op.alter_column('test_product_raw_data', 'goods_season',
               existing_type=sa.SMALLINT(),
               nullable=True)
    op.alter_column('test_product_raw_data', 'gubun',
               existing_type=sa.VARCHAR(length=10),
               nullable=True)
    op.alter_column('test_product_raw_data', 'class_cd3',
               existing_type=sa.VARCHAR(length=100),
               nullable=True)
    op.alter_column('test_product_raw_data', 'class_cd2',
               existing_type=sa.VARCHAR(length=100),
               nullable=True)
    op.alter_column('test_product_raw_data', 'class_cd1',
               existing_type=sa.VARCHAR(length=100),
               nullable=True)
    op.alter_column('test_product_modified_data', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('test_product_modified_data', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('test_product_modified_data', 'product_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('test_product_modified_data', 'no_keyword',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('test_product_modified_data', 'no_word',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('test_product_modified_data', 'detail_img_url',
               existing_type=sa.TEXT(),
               nullable=True)
    op.alter_column('test_product_modified_data', 'no_product',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('test_product_modified_data', 'product_nm',
               existing_type=sa.VARCHAR(length=60),
               nullable=True)
    op.alter_column('test_product_modified_data', 'gubun',
               existing_type=sa.VARCHAR(length=10),
               nullable=True)
    op.alter_column('product_mycategory_data', 'class_pr4',
               existing_type=sa.VARCHAR(length=50),
               nullable=True,
               existing_comment='세분류_전시순서')
    op.alter_column('product_mycategory_data', 'class_nm4',
               existing_type=sa.VARCHAR(length=50),
               nullable=True,
               existing_comment='세분류_분류명')
    op.alter_column('product_mycategory_data', 'class_cd4',
               existing_type=sa.VARCHAR(length=50),
               nullable=True,
               existing_comment='세분류_분류코드')
    op.alter_column('product_mycategory_data', 'class_pr3',
               existing_type=sa.VARCHAR(length=50),
               nullable=True,
               existing_comment='소분류_전시순서')
    op.alter_column('product_mycategory_data', 'class_nm3',
               existing_type=sa.VARCHAR(length=50),
               nullable=True,
               existing_comment='소분류_분류명')
    op.alter_column('product_mycategory_data', 'class_cd3',
               existing_type=sa.VARCHAR(length=50),
               nullable=True,
               existing_comment='소분류_분류코드')
    op.alter_column('product_mycategory_data', 'class_pr2',
               existing_type=sa.VARCHAR(length=50),
               nullable=True,
               existing_comment='중분류_전시순서')
    op.alter_column('product_mycategory_data', 'class_nm2',
               existing_type=sa.VARCHAR(length=50),
               nullable=True,
               existing_comment='중분류_분류명')
    op.alter_column('product_mycategory_data', 'class_cd2',
               existing_type=sa.VARCHAR(length=50),
               nullable=True,
               existing_comment='중분류_분류코드')
    op.alter_column('product_mycategory_data', 'class_pr1',
               existing_type=sa.VARCHAR(length=50),
               nullable=True,
               existing_comment='대분류_전시순서')
    op.alter_column('product_mycategory_data', 'class_nm1',
               existing_type=sa.VARCHAR(length=50),
               nullable=True,
               existing_comment='대분류_분류명')
    op.alter_column('product_mycategory_data', 'class_cd1',
               existing_type=sa.VARCHAR(length=50),
               nullable=True,
               existing_comment='대분류_분류코드')
    op.create_unique_constraint(op.f('down_form_orders_idx_key'), 'down_form_orders', ['idx'], postgresql_nulls_not_distinct=False)
    op.drop_column('down_form_orders', 'error_logs')
    op.alter_column('count_executing', 'count_rev',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('count_executing', 'count_nm',
               existing_type=sa.VARCHAR(length=50),
               nullable=True)
    op.alter_column('certification_detail', 'certification_agency',
               existing_type=sa.VARCHAR(length=50),
               nullable=True)
    op.create_table('ecount_sale',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('com_code', sa.VARCHAR(length=6), autoincrement=False, nullable=False, comment='회사코드'),
    sa.Column('user_id', sa.VARCHAR(length=30), autoincrement=False, nullable=False, comment='사용자ID'),
    sa.Column('upload_ser_no', sa.INTEGER(), autoincrement=False, nullable=True, comment='순번'),
    sa.Column('io_date', sa.VARCHAR(length=8), autoincrement=False, nullable=True, comment='판매일자'),
    sa.Column('cust', sa.VARCHAR(length=30), autoincrement=False, nullable=True, comment='거래처코드'),
    sa.Column('cust_des', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='거래처명'),
    sa.Column('wh_cd', sa.VARCHAR(length=5), autoincrement=False, nullable=False, comment='출하창고코드'),
    sa.Column('prod_cd', sa.VARCHAR(length=20), autoincrement=False, nullable=False, comment='품목코드'),
    sa.Column('prod_des', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='품목명'),
    sa.Column('qty', sa.NUMERIC(precision=28, scale=10), autoincrement=False, nullable=False, comment='수량'),
    sa.Column('price', sa.NUMERIC(precision=28, scale=10), autoincrement=False, nullable=True, comment='단가'),
    sa.Column('supply_amt', sa.NUMERIC(precision=28, scale=4), autoincrement=False, nullable=True, comment='공급가액'),
    sa.Column('vat_amt', sa.NUMERIC(precision=28, scale=4), autoincrement=False, nullable=True, comment='부가세'),
    sa.Column('remarks', sa.VARCHAR(length=200), autoincrement=False, nullable=True, comment='적요'),
    sa.Column('is_success', sa.BOOLEAN(), autoincrement=False, nullable=True, comment='성공여부'),
    sa.Column('slip_no', sa.VARCHAR(length=30), autoincrement=False, nullable=True, comment='판매번호(ERP)'),
    sa.Column('trace_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='로그확인용 일련번호'),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True, comment='오류메시지'),
    sa.Column('is_test', sa.BOOLEAN(), autoincrement=False, nullable=True, comment='테스트 여부'),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='생성일시'),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='수정일시'),
    sa.PrimaryKeyConstraint('id', name=op.f('ecount_sale_pkey'))
    )
    op.create_table('ecount_api_log',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('com_code', sa.VARCHAR(length=6), autoincrement=False, nullable=False, comment='회사코드'),
    sa.Column('user_id', sa.VARCHAR(length=30), autoincrement=False, nullable=False, comment='사용자ID'),
    sa.Column('api_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False, comment='API 유형 (zone, login, sale)'),
    sa.Column('api_url', sa.VARCHAR(length=500), autoincrement=False, nullable=False, comment='API URL'),
    sa.Column('request_method', sa.VARCHAR(length=10), autoincrement=False, nullable=True, comment='요청 메소드'),
    sa.Column('request_headers', sa.TEXT(), autoincrement=False, nullable=True, comment='요청 헤더'),
    sa.Column('request_body', sa.TEXT(), autoincrement=False, nullable=True, comment='요청 본문'),
    sa.Column('response_status', sa.INTEGER(), autoincrement=False, nullable=True, comment='응답 상태코드'),
    sa.Column('response_headers', sa.TEXT(), autoincrement=False, nullable=True, comment='응답 헤더'),
    sa.Column('response_body', sa.TEXT(), autoincrement=False, nullable=True, comment='응답 본문'),
    sa.Column('response_time_ms', sa.INTEGER(), autoincrement=False, nullable=True, comment='응답시간(밀리초)'),
    sa.Column('is_success', sa.BOOLEAN(), autoincrement=False, nullable=True, comment='성공여부'),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True, comment='오류메시지'),
    sa.Column('is_test', sa.BOOLEAN(), autoincrement=False, nullable=True, comment='테스트 여부'),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='생성일시'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('ecount_api_log_pkey'))
    )
    op.create_table('ecount_config',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('config_key', sa.VARCHAR(length=100), autoincrement=False, nullable=False, comment='설정 키'),
    sa.Column('config_value', sa.TEXT(), autoincrement=False, nullable=True, comment='설정 값'),
    sa.Column('description', sa.VARCHAR(length=500), autoincrement=False, nullable=True, comment='설명'),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True, comment='활성 여부'),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='생성일시'),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='수정일시'),
    sa.PrimaryKeyConstraint('id', name=op.f('ecount_config_pkey')),
    sa.UniqueConstraint('config_key', name=op.f('ecount_config_config_key_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('ecount_auth_session',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('com_code', sa.VARCHAR(length=6), autoincrement=False, nullable=False, comment='회사코드'),
    sa.Column('user_id', sa.VARCHAR(length=30), autoincrement=False, nullable=False, comment='사용자ID'),
    sa.Column('zone', sa.VARCHAR(length=2), autoincrement=False, nullable=False, comment='Zone 정보'),
    sa.Column('domain', sa.VARCHAR(length=30), autoincrement=False, nullable=False, comment='도메인 정보'),
    sa.Column('session_id', sa.VARCHAR(length=100), autoincrement=False, nullable=False, comment='세션ID'),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True, comment='활성 여부'),
    sa.Column('is_test', sa.BOOLEAN(), autoincrement=False, nullable=True, comment='테스트 여부'),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='만료일시'),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='생성일시'),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='수정일시'),
    sa.PrimaryKeyConstraint('id', name=op.f('ecount_auth_session_pkey'))
    )
    # ### end Alembic commands ###
