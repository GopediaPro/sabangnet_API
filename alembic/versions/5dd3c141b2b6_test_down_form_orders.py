"""test down form orders

Revision ID: 5dd3c141b2b6
Revises: 8deb89464864
Create Date: 2025-07-25 03:25:40.363334

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '5dd3c141b2b6'
down_revision: Union[str, None] = '8deb89464864'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('test_down_form_orders',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('process_dt', sa.TIMESTAMP(), nullable=True),
    sa.Column('form_name', sa.String(length=30), nullable=True),
    sa.Column('seq', sa.Integer(), nullable=True),
    sa.Column('idx', sa.String(length=50), nullable=False),
    sa.Column('order_id', sa.String(length=100), nullable=True),
    sa.Column('mall_order_id', sa.Text(), nullable=True),
    sa.Column('product_id', sa.Text(), nullable=True),
    sa.Column('product_name', sa.Text(), nullable=True),
    sa.Column('mall_product_id', sa.String(length=50), nullable=True),
    sa.Column('item_name', sa.String(length=100), nullable=True),
    sa.Column('sku_value', sa.Text(), nullable=True),
    sa.Column('sku_alias', sa.Text(), nullable=True),
    sa.Column('sku_no', sa.Text(), nullable=True),
    sa.Column('barcode', sa.Text(), nullable=True),
    sa.Column('model_name', sa.Text(), nullable=True),
    sa.Column('erp_model_name', sa.Text(), nullable=True),
    sa.Column('location_nm', sa.Text(), nullable=True),
    sa.Column('sale_cnt', sa.Integer(), nullable=True),
    sa.Column('pay_cost', sa.Numeric(precision=30, scale=2), nullable=True),
    sa.Column('delv_cost', sa.Numeric(precision=30, scale=2), nullable=True),
    sa.Column('total_cost', sa.Numeric(precision=30, scale=2), nullable=True),
    sa.Column('total_delv_cost', sa.Numeric(precision=30, scale=2), nullable=True),
    sa.Column('expected_payout', sa.Numeric(precision=30, scale=2), nullable=True),
    sa.Column('etc_cost', sa.Text(), nullable=True),
    sa.Column('price_formula', sa.String(length=50), nullable=True),
    sa.Column('service_fee', sa.Numeric(precision=30, scale=2), nullable=True),
    sa.Column('sum_p_ea', sa.Numeric(precision=30, scale=2), nullable=True),
    sa.Column('sum_expected_payout', sa.Numeric(precision=30, scale=2), nullable=True),
    sa.Column('sum_pay_cost', sa.Numeric(precision=30, scale=2), nullable=True),
    sa.Column('sum_delv_cost', sa.Numeric(precision=30, scale=2), nullable=True),
    sa.Column('sum_total_cost', sa.Numeric(precision=30, scale=2), nullable=True),
    sa.Column('receive_name', sa.String(length=100), nullable=True),
    sa.Column('receive_cel', sa.String(length=20), nullable=True),
    sa.Column('receive_tel', sa.String(length=20), nullable=True),
    sa.Column('receive_addr', sa.Text(), nullable=True),
    sa.Column('receive_zipcode', sa.String(length=15), nullable=True),
    sa.Column('delivery_payment_type', sa.String(length=10), nullable=True),
    sa.Column('delv_msg', sa.Text(), nullable=True),
    sa.Column('delivery_id', sa.Text(), nullable=True),
    sa.Column('delivery_class', sa.Text(), nullable=True),
    sa.Column('free_gift', sa.Text(), nullable=True),
    sa.Column('etc_msg', sa.Text(), nullable=True),
    sa.Column('order_etc_7', sa.Text(), nullable=True),
    sa.Column('invoice_no', sa.Text(), nullable=True),
    sa.Column('fld_dsp', sa.Text(), nullable=True),
    sa.Column('order_etc_6', sa.Text(), nullable=True),
    sa.Column('order_date', sa.DateTime(), nullable=True),
    sa.Column('reg_date', sa.String(length=14), nullable=True),
    sa.Column('ord_confirm_date', sa.String(length=14), nullable=True),
    sa.Column('rtn_dt', sa.String(length=14), nullable=True),
    sa.Column('chng_dt', sa.String(length=14), nullable=True),
    sa.Column('delivery_confirm_date', sa.String(length=14), nullable=True),
    sa.Column('cancel_dt', sa.String(length=14), nullable=True),
    sa.Column('hope_delv_date', sa.String(length=14), nullable=True),
    sa.Column('inv_send_dm', sa.String(length=14), nullable=True),
    sa.Column('work_status', sa.String(length=14), nullable=True),
    sa.Column('error_logs', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_table('ecount_auth_session')
    op.drop_table('ecount_config')
    op.drop_table('ecount_api_log')
    op.drop_table('ecount_sale')
    op.add_column('batch_process', sa.Column('order_date_from', sa.DateTime(), nullable=True, comment='주문 시작 일자'))
    op.add_column('batch_process', sa.Column('order_date_to', sa.DateTime(), nullable=True, comment='주문 종료 일자'))
    op.drop_column('batch_process', 'fail_records')
    op.drop_column('batch_process', 'total_records')
    op.drop_column('batch_process', 'success_records')
    op.drop_column('batch_process', 'target_table')
    op.drop_column('batch_process', 'target_table_ids')
    op.drop_column('batch_process', 'date_from')
    op.drop_column('batch_process', 'skip_records')
    op.drop_column('batch_process', 'file_hash')
    op.drop_column('batch_process', 'date_to')
    op.drop_column('batch_process', 'batch_name')
    op.alter_column('count_executing', 'count_nm',
               existing_type=sa.VARCHAR(length=50),
               nullable=False)
    op.alter_column('count_executing', 'count_rev',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('test_product_modified_data', 'gubun',
               existing_type=sa.VARCHAR(length=10),
               nullable=False)
    op.alter_column('test_product_modified_data', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('test_product_raw_data', 'class_cd1',
               existing_type=sa.VARCHAR(length=100),
               nullable=False)
    op.alter_column('test_product_raw_data', 'class_cd2',
               existing_type=sa.VARCHAR(length=100),
               nullable=False)
    op.alter_column('test_product_raw_data', 'class_cd3',
               existing_type=sa.VARCHAR(length=100),
               nullable=False)
    op.alter_column('test_product_raw_data', 'gubun',
               existing_type=sa.VARCHAR(length=10),
               nullable=False)
    op.alter_column('test_product_raw_data', 'goods_season',
               existing_type=sa.SMALLINT(),
               nullable=False)
    op.alter_column('test_product_raw_data', 'sex',
               existing_type=sa.SMALLINT(),
               nullable=False)
    op.alter_column('test_product_raw_data', 'opt_type',
               existing_type=sa.SMALLINT(),
               nullable=False,
               existing_server_default=sa.text('2'))
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('test_product_raw_data', 'opt_type',
               existing_type=sa.SMALLINT(),
               nullable=True,
               existing_server_default=sa.text('2'))
    op.alter_column('test_product_raw_data', 'sex',
               existing_type=sa.SMALLINT(),
               nullable=True)
    op.alter_column('test_product_raw_data', 'goods_season',
               existing_type=sa.SMALLINT(),
               nullable=True)
    op.alter_column('test_product_raw_data', 'gubun',
               existing_type=sa.VARCHAR(length=10),
               nullable=True)
    op.alter_column('test_product_raw_data', 'class_cd3',
               existing_type=sa.VARCHAR(length=100),
               nullable=True)
    op.alter_column('test_product_raw_data', 'class_cd2',
               existing_type=sa.VARCHAR(length=100),
               nullable=True)
    op.alter_column('test_product_raw_data', 'class_cd1',
               existing_type=sa.VARCHAR(length=100),
               nullable=True)
    op.alter_column('test_product_modified_data', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('test_product_modified_data', 'gubun',
               existing_type=sa.VARCHAR(length=10),
               nullable=True)
    op.alter_column('count_executing', 'count_rev',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('count_executing', 'count_nm',
               existing_type=sa.VARCHAR(length=50),
               nullable=True)
    op.add_column('batch_process', sa.Column('batch_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='배치 프로세스 이름'))
    op.add_column('batch_process', sa.Column('date_to', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='배치 프로세스 종료 일자'))
    op.add_column('batch_process', sa.Column('file_hash', sa.VARCHAR(length=64), autoincrement=False, nullable=True, comment='배치 파일 해시 (무결성 검증용)'))
    op.add_column('batch_process', sa.Column('skip_records', sa.INTEGER(), autoincrement=False, nullable=True, comment='건너뛴 레코드 수'))
    op.add_column('batch_process', sa.Column('date_from', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='배치 프로세스 시작 일자'))
    op.add_column('batch_process', sa.Column('target_table_ids', postgresql.ARRAY(sa.BIGINT()), autoincrement=False, nullable=True, comment='처리 대상 테이블 레코드 ID 배열'))
    op.add_column('batch_process', sa.Column('target_table', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='처리 대상 테이블명'))
    op.add_column('batch_process', sa.Column('success_records', sa.INTEGER(), autoincrement=False, nullable=True, comment='성공 레코드 수'))
    op.add_column('batch_process', sa.Column('total_records', sa.INTEGER(), autoincrement=False, nullable=True, comment='처리 대상 레코드 수'))
    op.add_column('batch_process', sa.Column('fail_records', sa.INTEGER(), autoincrement=False, nullable=True, comment='실패 레코드 수'))
    op.drop_column('batch_process', 'order_date_to')
    op.drop_column('batch_process', 'order_date_from')
    op.create_table('ecount_sale',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('com_code', sa.VARCHAR(length=6), autoincrement=False, nullable=False, comment='회사코드'),
    sa.Column('user_id', sa.VARCHAR(length=30), autoincrement=False, nullable=False, comment='사용자ID'),
    sa.Column('upload_ser_no', sa.INTEGER(), autoincrement=False, nullable=True, comment='순번'),
    sa.Column('io_date', sa.VARCHAR(length=8), autoincrement=False, nullable=True, comment='판매일자'),
    sa.Column('cust', sa.VARCHAR(length=30), autoincrement=False, nullable=True, comment='거래처코드'),
    sa.Column('cust_des', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='거래처명'),
    sa.Column('wh_cd', sa.VARCHAR(length=5), autoincrement=False, nullable=False, comment='출하창고코드'),
    sa.Column('prod_cd', sa.VARCHAR(length=20), autoincrement=False, nullable=False, comment='품목코드'),
    sa.Column('prod_des', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='품목명'),
    sa.Column('qty', sa.NUMERIC(precision=28, scale=10), autoincrement=False, nullable=False, comment='수량'),
    sa.Column('price', sa.NUMERIC(precision=28, scale=10), autoincrement=False, nullable=True, comment='단가'),
    sa.Column('supply_amt', sa.NUMERIC(precision=28, scale=4), autoincrement=False, nullable=True, comment='공급가액'),
    sa.Column('vat_amt', sa.NUMERIC(precision=28, scale=4), autoincrement=False, nullable=True, comment='부가세'),
    sa.Column('remarks', sa.VARCHAR(length=200), autoincrement=False, nullable=True, comment='적요'),
    sa.Column('is_success', sa.BOOLEAN(), autoincrement=False, nullable=True, comment='성공여부'),
    sa.Column('slip_no', sa.VARCHAR(length=30), autoincrement=False, nullable=True, comment='판매번호(ERP)'),
    sa.Column('trace_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='로그확인용 일련번호'),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True, comment='오류메시지'),
    sa.Column('is_test', sa.BOOLEAN(), autoincrement=False, nullable=True, comment='테스트 여부'),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='생성일시'),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='수정일시'),
    sa.PrimaryKeyConstraint('id', name=op.f('ecount_sale_pkey'))
    )
    op.create_table('ecount_api_log',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('com_code', sa.VARCHAR(length=6), autoincrement=False, nullable=False, comment='회사코드'),
    sa.Column('user_id', sa.VARCHAR(length=30), autoincrement=False, nullable=False, comment='사용자ID'),
    sa.Column('api_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False, comment='API 유형 (zone, login, sale)'),
    sa.Column('api_url', sa.VARCHAR(length=500), autoincrement=False, nullable=False, comment='API URL'),
    sa.Column('request_method', sa.VARCHAR(length=10), autoincrement=False, nullable=True, comment='요청 메소드'),
    sa.Column('request_headers', sa.TEXT(), autoincrement=False, nullable=True, comment='요청 헤더'),
    sa.Column('request_body', sa.TEXT(), autoincrement=False, nullable=True, comment='요청 본문'),
    sa.Column('response_status', sa.INTEGER(), autoincrement=False, nullable=True, comment='응답 상태코드'),
    sa.Column('response_headers', sa.TEXT(), autoincrement=False, nullable=True, comment='응답 헤더'),
    sa.Column('response_body', sa.TEXT(), autoincrement=False, nullable=True, comment='응답 본문'),
    sa.Column('response_time_ms', sa.INTEGER(), autoincrement=False, nullable=True, comment='응답시간(밀리초)'),
    sa.Column('is_success', sa.BOOLEAN(), autoincrement=False, nullable=True, comment='성공여부'),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True, comment='오류메시지'),
    sa.Column('is_test', sa.BOOLEAN(), autoincrement=False, nullable=True, comment='테스트 여부'),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='생성일시'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('ecount_api_log_pkey'))
    )
    op.create_table('ecount_config',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('config_key', sa.VARCHAR(length=100), autoincrement=False, nullable=False, comment='설정 키'),
    sa.Column('config_value', sa.TEXT(), autoincrement=False, nullable=True, comment='설정 값'),
    sa.Column('description', sa.VARCHAR(length=500), autoincrement=False, nullable=True, comment='설명'),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True, comment='활성 여부'),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='생성일시'),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='수정일시'),
    sa.PrimaryKeyConstraint('id', name=op.f('ecount_config_pkey')),
    sa.UniqueConstraint('config_key', name=op.f('ecount_config_config_key_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('ecount_auth_session',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('com_code', sa.VARCHAR(length=6), autoincrement=False, nullable=False, comment='회사코드'),
    sa.Column('user_id', sa.VARCHAR(length=30), autoincrement=False, nullable=False, comment='사용자ID'),
    sa.Column('zone', sa.VARCHAR(length=2), autoincrement=False, nullable=False, comment='Zone 정보'),
    sa.Column('domain', sa.VARCHAR(length=30), autoincrement=False, nullable=False, comment='도메인 정보'),
    sa.Column('session_id', sa.VARCHAR(length=100), autoincrement=False, nullable=False, comment='세션ID'),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True, comment='활성 여부'),
    sa.Column('is_test', sa.BOOLEAN(), autoincrement=False, nullable=True, comment='테스트 여부'),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='만료일시'),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='생성일시'),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='수정일시'),
    sa.PrimaryKeyConstraint('id', name=op.f('ecount_auth_session_pkey'))
    )
    op.drop_table('test_down_form_orders')
    # ### end Alembic commands ###
